#
# Deploy with:
# sam deploy --profile fas
# or put this in samconfig.toml:
# [default.deploy.parameters]
# profile = "fas"

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >-
  Leaderboard application

Parameters:
  FQDN:
    Type: String
    Description: Fully qualified domain name
  ZoneId:
    Type: String
    Description: Route53 Zone ID


Globals:
  Function:
    Timeout: 10
    MemorySize: 256
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
      AllowHeaders: "'content-type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  # Create our SSL certificate
  GenerateCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref FQDN
      ValidationMethod: DNS
      DomainValidationOptions:
      - DomainName: !Ref FQDN
        HostedZoneId: !Ref ZoneId

  RestApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Domain:
        DomainName: !Ref FQDN
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId: !Ref ZoneId
      BinaryMediaTypes:
        - image/x-icon
        - image/png
        - image/jpeg
        - audio/mpeg
        - application/octet-stream
        - application/json
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowHeaders: "'content-type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  HandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: ./src
      Handler: lambda_handler.lambda_app
      Runtime: python3.12
      Events:
        RootPath:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /
            Method: ANY
        ProxyPath:
          Type: Api
          Properties:
            RestApiId: !Ref RestApiGateway
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          LEADERBOARD_TABLE: !Ref LeaderboardTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref LeaderboardTable

  # define the DynamoDB table used to hold the Leaderboard
  # We index on the name. Each entry is a JSON object whose structure
  # is determiend at runtime.
  # We actually store these attributes: name, ip_address, first_seen, last_seen, secret_key
  LeaderboardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Leaderboard    # only needs to be unique within the account
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${FQDN}"
